# A class is a blueprint for objects
# one class for any number of objects of that type.
# Also call it an abstract data type.
# Interestingly, it contains no values itself, 
# but it is like a prototype for objects.

# Многие объектно-ориентированные языки, такие как C++,
# Java и Python, используют классы для определения состояния, которое
# может храниться в объекте, и методов для изменения этого состояния.

# Если классы являются определениями состояния и методов, экземпляры
# являются воплощениями этих классов. Как правило, когда разработчик
# говорит об объектах, он имеет в виду экземпляры классов.

# Чтобы создать экземпляр класса str с именем b , используйте синтаксис
# строковых литералов Python:
b = 'I\'m a string'
print(b) #>> I'm a string
# Термин «литерал» в данном случае означает специальный синтаксис
# создания строк, встроенный в Python.

# Если программисты начнут обсуждать b , вы можете услышать самые
# разные термины. 
# « b — это строка», 
# « b — это объект», 
# « b — это экземпляр строки»

# Прежде всего заметим, что классы не всегда необходимы в Python. 
# Подумайте, нужно ли определять класс или же хватит функции (или группы функций).

# Класс может быть полезен для программного представления
# физических или концептуальных объектов. 
# Понятия, являющиеся описаниями, — скорость, температура, среднее арифметическое, цвет
# — не являются хорошими кандидатами для классов.

# Если вы решили, что хотите моделировать что-либо с помощью класса,задайте себе следующие вопросы:
# У него есть имя?
#   Имена классов записываются в «верблюжьем регистре»
# Какими свойствами он обладает?
# Присущи ли эти свойства всем экземплярам класса? 
#   А именно:
#       Какие свойства являются общими для класса в целом?
#       Какие из этих свойств уникальны для каждого экземпляра?
#       Какие операции он выполняет?

num = 42
answer = str(num)
print(answer) #>> 42
print(type(answer)) #>> <class 'str'>

# class "Chair"
# Есть ли имя у моделируемой сущности? Да, «кресло». 
# Среди свойств
# кресла можно выделить номер, вместимость, наличие планки безопасности и мягких сидений. 
# Если погрузиться немного глубже, 
# вместимость можно разбить на максимальную вместимость и текущую занятость.
# Максимальная емкость должна оставаться постоянной, 
# тогда как занятость может изменяться в любой момент времени.

# Строки документации - строковые литералы, 
# которые являются первым оператором в модуле, функции, классе или определении метода.
class Chair:                            # name
    ''' A chair on a  chairlift '''     # documentation line
    max_occupants = 4                   # atributes of a class (4 occupants)

    def __init__(self, id):             # method(constructor)
        self.id = id
        self.count = 0
    
    def load(self, number):
        self.count += number
    
    def unload(self, number):
        self.count -= number

print(Chair.__doc__) #>> 'A chair on a  chairlift'

# Атрибут класса используется для хранения состояния, общего для всех экземпляров класса.
# Функция, определяемая прямо в теле класса, называется методом.
# Так как этот метод имеет специальное имя __init__ , он называется конструктором.
#   Конструктор вызывается при создании экземпляра класса.