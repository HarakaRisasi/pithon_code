# -*- coding: utf-8 -*-
import subprocess
subprocess.call("clear")

# Парсинг – это процесс сбора данных с последующей их обработкой и анализом. 
# К этому способу прибегают, когда предстоит обработать большой массив информации, 
# с которым сложно справиться вручную. 
# Программа, которая производит сбор и синтаксический анализ, – это парсер. 
# С ее помощью можно упростить работу по поиску контента 
# для собственного ресурса и проводить ее в сжатые сроки.
#
# Разновидности парсинга:
# Parsing позволяет осуществлять работу с данными любой тематики. 
# Среди основных сфер применения такой технологии можно выделить:
# 
# - поиск и наполнение ресурсов текстовым и мультимедийным контентом;
# - товары и цены в интернет-магазинах;
# - данные из объявлений, размещенных на специальных ресурсах;
# - поиск и сбор контактных данных пользователей;
# - в рамках социальных сетей (например, отзывы и комментарии);
# - сайты, специализирующиеся на публикации спортивных результатов.
# 
# Этапы парсинга:
# - Поиск данных. 
#   В программу-парсер загружается исходный HTML-код страницы сайта. 
#   С кодом начинает работать скрипт, который разбивает весь текст на лексемы, 
#   выделяя необходимую информацию.# 
# - Извлечение информации. 
#   Поиск данных происходит благодаря определенному набору знаков, описывающих цель поиска. 
#   Этот набор также называется регулярными выражениями. 
#   Они позволяют выделить из всего массива только интересующие фрагменты.# 
# - Сохранение данных. 
#   После получения информация сохраняется в виде таблиц или вносится в базу данных.
# 
# Парсинг не является противозаконной операцией, 
# но осуществлять его можно только при соблюдении соответствующих условий:
# - исследуемая информация должна находиться в открытом доступе 
#   и не быть под защитой закона об авторских и смежных правах;# 
# - сбор данных не должен приводить к сбоям в работе сети интернет и проблемам с ресурсами, 
#   являющимися источниками информации (слишком активная работа парсера может быть принята за DOS-атаку);
# - сбор должен проводиться только законными способами;
# - парсинг не должен ограничивать конкуренцию.
#
# Защита от парсинга
# - Разграничение прав доступа. 
#   Информация о структуре сайта скрывается от роботов и остается доступной только для администрации. 
#   Это наиболее простой способ защиты информации.
# - Черные и белые списки. 
#   Пользователи, которые пытаются украсть контент, отправляются в списки нежелательных, 
#   в соответствии с чем к ним применяются установленные санкции.
# - Временная задержка между запросами. 
#   Парсинг отличается направлением постоянных хаотических запросов. 
#   Установка временной задержки для обращений, отправляемых с одного компьютера, 
#   позволит ограничить доступ к информации.\
# - Различные методы защиты от роботов. 
#   Установка на сайте авторизации, которую может пройти только человек (ввод капчи, подтверждение регистрации и другие способы).
# #

#from urllib.request import urlopen
#from bs4 import BeautifulSoup

#####################################################################################################################
import re # using Regex
import requests
from lxml import html

url = 'https://www.rusprofile.ru/codes/'
response = requests.get(url)
parser_tree = html.fromstring(response.content)
response = parser_tree.xpath('//*[@id="main"]/div/div[2]/div[3]/div[1]/div[1]/div[2]/div[2]/div[1]/div[2]/a//text()')

# convert a list to string
listToStr = ' '.join([str(elem) for elem in response]) #.replace('\n','')

# use a regular expression to match whitespace and remove them using re.sub() function.
# strip() - remove spaces from both side

print(re.sub(r"\s+", " ", listToStr.strip()))
#>> Производство кухонной мебели, кроме изготовленной по индивидуальному заказу населения (12)
#####################################################################################################################

# [@attribute = 'value']
# //*[@id="main"]/div/div[2]/div[3]/div/div[1]/div[2]/div[2]/div[1]/div[2]/a
# //*[@id="main"]/div/div[2]/div[3]/div/div[1]/div[2]/div[3]/div[1]/div[2]/a
# //*[@id="main"]/div/div[2]/div[3]/div/div[1]/div[2]/div[4]/div/div[2]/a
# //*[@id="main"]/div/div[2]/div[3]/div/div[1]/div[2]/div[5]/div[1]/div[2]/a
# //*[@id="main"]/div/div[2]/div[3]/div/div[1]/div[2]/div[6]/div/div[2]/a
# //*[@id="main"]/div/div[2]/div[3]/div/div[1]/div[2]/div[7]/div[1]/div[2]/a
# //*[@id="main"]/div/div[2]/div[3]/div/div[1]/div[2]/div[8]/div/div[2]/a